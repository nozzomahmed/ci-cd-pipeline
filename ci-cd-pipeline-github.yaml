---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  Template to prepare CI/CD pipeline with github as code storage to be able to
  deploy itself and other template as a Cloudformation stack.


##############################
#
# Parameters
#
##############################

Parameters:

  GithubUserName:
    Description: >
      Name of the Github user who is owner of the repositories.
    Type: String
    Default: nozzomahmed

  # Create record in AWS SecretsManager to store github token and provide
  # details below.
  GithubSecretName:
    Description: >
      Name of the secret that holds Github token.
    Type: String
    Default: ci-cd-token

  GithubSecretKey:
    Description: >
      Key of the secret that holds Github token value.
    Type: String
    Default: Token

  GithubPipelineRepositoryName:
    Description: >
      Name of the repository that has this template.
    Type: String
    Default: ci-cd-pipeline

  GithubPipelineTemplateName:
    Description: >
      Name of this template file.
    Type: String
    Default: ci-cd-pipeline-github.yaml

  GithubActualStackRepositoryName:
    Description: >
      Name of the actual repository that will be deployed on Cloudformation.
    Type: String
    Default: aws-kubernetes-wordpress

  GithubActualStackTemplateName:
    Description: >
      Name of the template file of actual stack.
    Type: String
    Default: wordpress-master.template

  ActualStackName:
    Description: Name of the actual Cloudformation stack that has to be deployed.
    Type: String
    Default: wordpress

  ArtifactsS3BucketName:
    Description: Name of S3 bucket that will keep CodePipeline Artifacts
    Type: String
    Default: pipeline-artifacts-bucket-github-integration2


##############################
#
# Resources
#
##############################

Resources:


  ###
  #
  # Roles
  #
  ###

  # Role for codepipeline execution
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Pipeline_role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess # Access to bucket with artifacts
      Policies:
        -
          PolicyName: Pipeline_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource:
                  - arn:aws:codepipeline:*
              -
                Effect: Allow # Without this permiission stage can't check if it has to create new stack or update existing
                Action:
                  - cloudformation:DescribeStacks
                Resource:
                  - arn:aws:cloudformation:*
      AssumeRolePolicyDocument: # This will allow codepipeline to provide changes to other resources
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole

  # Role for Pipeline stage to be able to manipulate resources
  PipelineResourceManipulationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Pipeline_resource_manipulation_role
      Policies:
        -
          PolicyName: Pipeline_resource_manipulation_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Action:
              - iam:PassRole
              Resource: "*"
              Effect: Allow
              Condition:
                StringEqualsIfExists:
                  iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - ec2.amazonaws.com
            - Action:
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              Resource: "*"
              Effect: Allow
            - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
              Resource: "*"
              Effect: Allow
      AssumeRolePolicyDocument: # Lets Pipeline observe events that comes from or other resources (like CodeCommit)
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
          -
            Effect: Allow # Pipeline role has to be able to use this role
            Principal:
              AWS: !GetAtt PipelineRole.Arn
            Action:
              - sts:AssumeRole

  # Policy that supports role with minimal permissions
  SecretAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: secret_access_policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource: "*"
      Roles:
        - !Ref CiCdPipelineCloudformationDeploymentRole
        - !Ref ActualPipelineCloudformationDeploymentRole

  DBAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DB_access_policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - rds:*
            Resource: "*"
      Roles:
        - !Ref ActualPipelineCloudformationDeploymentRole

  # Role to deploy CI/CD cloudformation stack. That will allow
  # Cloudformation stack to provde necessary changes during its update.
  CiCdPipelineCloudformationDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CI-CD_Pipeline_Cloudformation_deployment_role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMFullAccess # to create Pipeline roles
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess # To create Pipeline
      AssumeRolePolicyDocument: # Allows codepipeline to execute cloudformation stack update
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
          -
            Effect: Allow # Pipeline role has to be able to use this roles
            Principal:
              AWS: !GetAtt PipelineRole.Arn
            Action:
              - sts:AssumeRole

  # Policy that is being used with Cloudformation deployment.
  ActualPipelineCloudformationDeploymentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Actual_Pipeline_Cloudformation_deployment_policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - ec2:DescribeImages
              - eks:CreateCluster
              - eks:DeleteCluster
              - eks:DescribeCluster
            Resource: "*"
      Roles:
        - !Ref ActualPipelineCloudformationDeploymentRole

  # Role for cloudformation to deploy stack. That will allow
  # Cloudformation stack access necessary resources.
  ActualPipelineCloudformationDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Actual_Pipeline_Cloudformation_deployment_role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMFullAccess # to create Pipeline roles
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess # To create Pipeline
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess # To create VPC
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Policies:
        -
          PolicyName: Cloudformation_allow_CreateChangeSet_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                Resource:
                  - !Sub 'arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31'
      AssumeRolePolicyDocument: # Allows codepipeline to execute cloudformation stack update
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
          -
            Effect: Allow # Pipeline role has to be able to use this role
            Principal:
              AWS: !GetAtt PipelineRole.Arn
            Action:
              - sts:AssumeRole
          # -
          #   Effect: Allow # Allow cli user to use role that has been used to create EKS stack
          #   Principal:
          #     AWS: !GetAtt EKSAccessUser.Arn
          #   Action:
          #     - sts:AssumeRole

  ###
  # S3 Bucket for CodePipeline artifacts
  ###

  # This bucket is required by codepipeline
  S3BucketPipelineArtifacts:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ArtifactsS3BucketName
      AccessControl: Private


  ###
  #
  # Pipelines
  #
  ###

  ###
  # CI/CD Pipeline
  ###
  CiCdPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: CI-CD-stack_deployment_pipeline
      RestartExecutionOnUpdate: false # Do not restart on pipeline config update
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3BucketPipelineArtifacts
      Stages:
        -
          Name: SourceCode
          Actions:
            -
              Name: ChangeDetection
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GithubUserName
                Repo: !Ref GithubPipelineRepositoryName
                Branch: master
                OAuthToken: !Sub '{{resolve:secretsmanager:${GithubSecretName}:SecretString:${GithubSecretKey}}}'
              OutputArtifacts:
                -
                  Name: SourceArtifact
              Region: ap-southeast-2

        -
          Name: CloudformationStack
          Actions:
            -
              Name: Deployment
              RoleArn: !GetAtt PipelineResourceManipulationRole.Arn
              InputArtifacts:
                -
                  Name: SourceArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Ref AWS::StackName
                RoleArn: !GetAtt ActualPipelineCloudformationDeploymentRole.Arn
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: !Sub SourceArtifact::${GithubPipelineTemplateName}
              Region: ap-southeast-2


  ###
  # Actual stack Pipeline
  ###
  ActualStackPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: Actual-stack_deployment_pipeline
      RestartExecutionOnUpdate: false # Do not restart on pipeline config update
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3BucketPipelineArtifacts
      Stages:
        -
          Name: SourceCode
          Actions:
            -
              Name: ChangeDetection
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GithubUserName
                Repo: !Ref GithubActualStackRepositoryName
                Branch: master
                OAuthToken: !Sub '{{resolve:secretsmanager:${GithubSecretName}:SecretString:${GithubSecretKey}}}'
              OutputArtifacts:
                -
                  Name: SourceArtifact
              Region: ap-southeast-2

        -
          Name: CloudformationStack
          Actions:
            -
              Name: Deployment
              RoleArn: !GetAtt PipelineResourceManipulationRole.Arn
              InputArtifacts:
                -
                  Name: SourceArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Ref ActualStackName
                RoleArn: !GetAtt ActualPipelineCloudformationDeploymentRole.Arn
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND # Needed for AWS::Serverless template usage
                TemplatePath: !Sub SourceArtifact::${GithubActualStackTemplateName}
              Region: ap-southeast-2




##############################
#
# Outputs
#
##############################

Outputs:
  DeploymentRole:
    Description: >
      ARN of the role that is being used to deploy second stack.
    Value: !GetAtt ActualPipelineCloudformationDeploymentRole.Arn
    Export:
          Name: stack-deployment-role
